{"pages":[],"posts":[{"title":"核心概念之Map和View","text":"Map是用于管理图层和底图引用的容器。View用于显示地图图层并处理用户交互，弹出窗口，小部件和地图位置。通俗来说，可以理解为Map负责地图数据的管理，而View负责处理地图数据的显示及地图与用户之间的交互。 Map介绍地图是由Map类创建的。Map对象总是被传递给一个View对象。有两个View类用于显示地图：MapView类用于展示2D地图，SceneView类用于展示3D地图。 创建Map一般方法创建map的一种方法是建立一个新的Map类的实例，同时指定一个底图和可选的图层集合。 底图与图层类型在后续的章节会详细说明。 123456789const myMap = new Map({ // Create a Map object basemap: &quot;streets-vector&quot;, layers: additionalLayers // Optionally, add additional layers collection});const mapView = new MapView({ // The View for the Map object map: myMap, container: &quot;mapDiv&quot;}); 通过Web Map或Web Scene创建map的第二种方式是加载 web map（用于2D地图）或web scene（用于3D地图）。 Web Map和Web Scene是包含地图或场景设置的JSON结构。这包括对底图、图层、图层样式、弹出窗口、图例、标签等的设置。它们通常是通过ArcGIS Online地图查看器或ArcGIS Online场景查看器创建的。ArcGIS Online或ArcGIS Enterprise会给它们分配一个唯一的ID，并将它们存储为portal items。 示例：https://www.arcgis.com/home/item.html?id=41281c51f9de45edaf1c8ed44bb10e30 通过WebMap创建 1234567891011const webMap = new WebMap({ // Define the web map reference portalItem: { id: &quot;41281c51f9de45edaf1c8ed44bb10e30&quot;, portal: &quot;https://www.arcgis.com&quot; // Default: The ArcGIS Online Portal }});const view = new MapView({ map: webMap, // Load the web map container: &quot;viewDiv&quot;}); 通过WebScene创建 1234567891011const webScene = new WebScene({ // Define the web scene reference portalItem: { id: &quot;579f97b2f3b94d4a8e48a5f140a6639b&quot;, portal: &quot;https://www.arcgis.com&quot; // Default: The ArcGIS Online Portal }});const view = new SceneView({ // Load the web scene map: webScene, container: &quot;viewDiv&quot;}); View介绍有单独的类用于创建map和scene的视图：MapView和SceneView类。MapView显示的是Map对象的2D视图，SceneView显示的是3D视图。 创建View为了使地图可见，view对象需要一个map对象和一个识别div元素或div元素引用的id属性的字符串。 创建MapView 1234const mapView = new MapView({ // Create MapView object map: myMap, container: &quot;mapViewDiv&quot;}); 创建SceneView 1234const sceneView = new SceneView({ // Create SceneView object map: myMap, container: &quot;sceneViewDiv&quot;}); 设置map的可视范围MapView和SceneView的初始位置可以在创建视图时通过设置 center 和 zoom 或者 scale属性来设置。 1234const view = new MapView({ center: [ -112, 38 ], // The center of the map as lon/lat zoom: 13 // Sets the zoom level of detail (LOD) to 13}); 视图的位置在初始化后也可以通过更新属性来更新。 当使用SceneView（3D）时，可以通过定义 camera属性来设置观察者的位置。 1234567891011const view = new SceneView({ camera: { position: [ -122, // lon 38, // lat 50000 // elevation in meters ], heading: 95, // direction the camera is looking tilt: 65 // tilt of the camera relative to the ground }}); 将视图通过动画改变位置MapView的goTo方法也会改变视图的位置，但提供了额外的选项来平稳过渡。这种技术经常被用来从表面上的一个位置 “飞 “到另一个位置，或者放大到搜索结果。goTo方法可以接受一个Geometry, Graphic, or Viewpoint对象。其他选项可以控制动画效果。 1234567view.goTo({ // go to point with a custom animation duration target: { center: [ -114, 39 ] }, { duration: 5000 });}); 效果预览： 与视图交互View还负责处理用户交互和显示弹出窗口。View为用户的交互提供了多个事件处理程序，如鼠标点击、键盘输入、触摸屏互动、摇杆和其他输入设备。 示例： 当用户点击地图时，默认行为是显示图层中已经预先配置好的弹出窗口。这种行为也可以用代码手动实现，即监听点击事件并使用hitTest()方法来寻找用户点击的要素。 1234567891011121314view.popup.autoOpenEnabled = false; // Disable the default popup behaviorview.on(&quot;click&quot;, function(event) { // Listen for the click event view.hitTest(event).then(function (hitTestResults){ // Search for features where the user clicked if(hitTestResults.results) { view.popup.open({ // open a popup to show some of the results location: event.mapPoint, title: &quot;Hit Test Results&quot;, content: hitTestResults.results.length + &quot;Features Found&quot; }); } })}); 添加小部件和 UI 组件view也是一个添加小部件和HTML元素的容器。view.ui提供了一个DefaultUI容器，用来显示视图的默认widget。通过使用view.ui.add方法，也可以将额外的widget和HTML Elements添加到视图中。 演示添加搜索widget： 12345678var searchWidget = new Search({ view: view});// Add the search widget to the top right corner of the viewview.ui.add(searchWidget, { position: &quot;top-right&quot;});","link":"/2022/03/30/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B9%8BMap%E5%92%8CView/"},{"title":"ArcGIS API for JavaScript 安装和配置","text":"ArcGIS API for JavaScript是将地理信息或者地理数据进行可视化表达或者地理分析处理的JS库，可用于浏览器环境和Node.js环境^1。要在项目中使用ArcGIS JS API，有下面几种方式。 AMD与ESM选择API安装方式的前置条件，只做简单介绍。 AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。 1require([module], callback); 第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。 ES Module把一个文件当作一个模块，每个模块有自己的独立作用域，核心点就是模块的导入（import）与导出（export）。 export后只能跟function、class、var、let、const、default、{}，export的作用就是给当前模块对象添加属性，方便后期导入到其他模块中，其中 export default方法最常用。 import命令用于导入其他模块提供的数据，格式： 1import &lt;module&gt; from &lt;url&gt; API安装的四种方式 CDN (AMD) ESM local build AMD local build 不需要安装，配置和本地构建 X 通过CDN缓存快速下载 X 可以通过npm快速安装 X 与大多数现代框架和构建工具无缝集成 X 使用4.17版本或更早的API与框架或构建工具 X 使用 Dojo 1 或者 RequireJS X 通过CDN提供的AMD模块访问API的最常见方法是使用托管版本。 12&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.20/esri/themes/light/main.css&quot;&gt;&lt;script src=&quot;https://js.arcgis.com/4.20/&quot;&gt;&lt;/script&gt; 通过NPM提供的ES模块^1API也可以通过npm作为ES模块使用。你可以在本地安装API，以便与React和Vue等JavaScript框架以及webpack等打包器一起使用。 安装 1yarn add @arcgis/core 配置CSS 复制/node_modules/@arcgis/core/assets到/public/assets文件夹中 配置ArcGIS资源路径为本地路径 12import esriConfig from &quot;@arcgis/core/config.js&quot;;esriConfig.assetsPath = &quot;./assets&quot;; 全局CSS文件中引入ArcGIS本地样式文件 1@import &quot;~@arcgis/core/assets/esri/themes/light/main.css&quot;; 导入 1import Map from &quot;@arcgis/core/Map&quot;; 在本地托管的AMD模块修改API中init.js文件和dojo.js文件，将修改好的API部署在自有服务器中，用于网络缺失及网络较差的环境中。 较早版本 下载 ArcGIS JS API 下载网站 下载分为API和SDK，API包含开发所需的库文件，SDK为离线文档和实例^2。 将压缩包解压，复制\\arcgis_js_v420_api\\arcgis_js_api\\javascript\\4.20\\ 及下面所有内容到托管服务器目录中。例如C:\\Inetpub\\wwwroot\\javascript\\api\\4.20\\。 打开 C:\\Inetpub\\wwwroot\\javascript\\api\\4.20\\init.js 搜索 [HOSTNAME_AND_PATH_TO_JSAPI], 并替换为以下字符串 www.example.com/javascript/api/4.20/init.js。 较新版本 下载同上 将压缩包解压，复制\\javascript\\4.22\\ 及下面所有内容到托管服务器目录中。例如C:\\Inetpub\\wwwroot\\javascript\\4.22\\。 通过浏览器访问安装根目录中的index.html文件，如http://localhost/javascript/4.22/，根据输出信息判断是否安装成功。 通过CDN提供的ES模块^1==注意：这种方法目前只推荐用于开发和原型阶段。== 123456&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.20/@arcgis/core/assets/esri/themes/light/main.css&quot;&gt;&lt;script type=&quot;module&quot;&gt; import Map from &quot;https://js.arcgis.com/4.20/@arcgis/core/Map.js&quot;; // Use the Map class&lt;/script&gt; 服务器配置托管 ArcGIS API for JavaScript 的 Web 服务器将需要注册以下 MIME/type（主要为IIS）。 extension MIME/type Description .ttf application/octet-stream True Type Fonts .wasm application/wasm WebAssembly .woff application/font-woff Web Open Font Format .woff2 application/font-woff2 WOFF File Format 2.0 .wsv application/octet-stream Supports SceneView‘s stars visualization","link":"/2022/03/30/ArcGIS-API-for-JavaScript-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"ArcGIS","slug":"ArcGIS","link":"/tags/ArcGIS/"},{"name":"API","slug":"API","link":"/tags/API/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"核心概念","slug":"核心概念","link":"/tags/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"},{"name":"安装","slug":"安装","link":"/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","link":"/tags/%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"ArcGIS API for JavaScript基础教程","slug":"ArcGIS-API-for-JavaScript基础教程","link":"/categories/ArcGIS-API-for-JavaScript%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"}]}